<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 未来可期</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on 未来可期</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql存储过程学习总结</title>
      <link>http://localhost:1313/post/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
      <description>#存储过程学习总结 声明语句结束符，可以自定义: 1 2 3 DELIMITER $$ 或 DELIMITER // 声明存储过程: 1 CREATE PROCEDURE demo_in_parameter(IN p_in int) 存储过程开始和结束符号: 1 BEGIN .... END 变量赋值: 1 SET @p_in=1 变量</description>
    </item>
    
    <item>
      <title>logback配置总结</title>
      <link>http://localhost:1313/post/logback%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/logback%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</guid>
      <description>在项目中添加日志输出，有利于调试和错误追踪。 本篇主要实现LogBack彩色日志输出。 在resource目录下添加logback.xml： 1 2</description>
    </item>
    
    <item>
      <title>springboot参数校验</title>
      <link>http://localhost:1313/post/springboot%E6%B3%A8%E8%A7%A3%E6%A0%A1%E9%AA%8C/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/springboot%E6%B3%A8%E8%A7%A3%E6%A0%A1%E9%AA%8C/</guid>
      <description>Spring Boot 参数校验 1.在实体类的属性上添加相应校验规则 2.在控制层的参数中添加@Valid或@Validator注解，即可对入参进行校验 3.校验异</description>
    </item>
    
    <item>
      <title>springcloud整合zipkin问题(转)</title>
      <link>http://localhost:1313/post/springcloud%E6%95%B4%E5%90%88zipkin%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/springcloud%E6%95%B4%E5%90%88zipkin%E9%97%AE%E9%A2%98/</guid>
      <description>注册中心为 nacos 有一天把代码更新完推到gitlab后，用jenkins重启完项目发现一直报错，去看日志才发现后台在疯狂报错，错误如下 1 2 3 4 5 zipkin:base-url:http://47.111.134.3:9411/enabled:truesender:type:web</description>
    </item>
    
    <item>
      <title>参数校验国际化</title>
      <link>http://localhost:1313/post/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E5%9B%BD%E9%99%85%E5%8C%96/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E5%9B%BD%E9%99%85%E5%8C%96/</guid>
      <description>参数校验国际化： 1.配置类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @Configuration(&amp;#34;admimWebConfig&amp;#34;) @Primary public class WebConfiguration implements WebMvcConfigurer { @Autowired private MessageSource messageSource; @Override public Validator getValidator() { return validator(); } @Bean public Validator validator() { LocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();</description>
    </item>
    
    <item>
      <title>统一异常处理总结</title>
      <link>http://localhost:1313/post/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>springboot全局异常统一处理 1.根据业务需求自定义一个异常类 1 2 3 4 5 6 7 8 9 10 11 12 13 public class BaseonException extends RuntimeException { private Integer code; public BaseonException(ResultEnums resultEnums) { super(resultEnums.getMsg()); this.code = resultEnums.getCode(); } public Integer getCode() { return</description>
    </item>
    
    <item>
      <title>自定义注解赋值</title>
      <link>http://localhost:1313/post/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5%E5%8F%82%E6%95%B0%E5%80%BC/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5%E5%8F%82%E6%95%B0%E5%80%BC/</guid>
      <description>代码优化:自定义注解,通过AOP给参数赋值 1.新建一个自定义注解 1 2 3 4 5 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface NeedSetFeildValue { } 2.创建一个AOP类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>跨域设置</title>
      <link>http://localhost:1313/post/springboot%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/springboot%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</guid>
      <description>springboot跨域设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @Component @Order(Ordered.HIGHEST_PRECEDENCE) public class CORSFilter implements WebFilter { @Override public Mono&amp;lt;Void&amp;gt; filter(ServerWebExchange swe, WebFilterChain wfc) { ServerHttpRequest request = swe.getRequest(); if (CorsUtils.isCorsRequest(request)) { ServerHttpResponse response = swe.getResponse(); HttpHeaders headers = response.getHeaders(); headers.add(&amp;#34;Access-Control-Allow-Origin&amp;#34;,</description>
    </item>
    
  </channel>
</rss>